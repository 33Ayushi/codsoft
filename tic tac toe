import random
import sys 

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def is_winner(board, player):
    # Check rows, columns, and diagonals for a win
    for row in board:
        if all(cell == player for cell in row):
            return True

    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True

    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

def is_board_full(board):
    # Check if the board is full
    return all(cell != " " for row in board for cell in row)

def get_empty_cells(board):
    # Return a list of empty cells
    return [(row, col) for row in range(3) for col in range(3) if board[row][col] == " "]

def minimax(board, depth, maximizing_player):
    if is_winner(board, "X"):
        return -1
    if is_winner(board, "O"):
        return 1
    if is_board_full(board):
        return 0

    if maximizing_player:
        max_eval = float("-inf")
        for (row, col) in get_empty_cells(board):
            board[row][col] = "O"
            eval = minimax(board, depth + 1, False)
            board[row][col] = " "
            max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float("inf")
        for (row, col) in get_empty_cells(board):
            board[row][col] = "X"
            eval = minimax(board, depth + 1, True)
            board[row][col] = " "
            min_eval = min(min_eval, eval)
        return min_eval

def get_best_move(board):
    best_move = None
    best_eval = float("-inf")
    for (row, col) in get_empty_cells(board):
        board[row][col] = "O"
        eval = minimax(board, 0, False)
        board[row][col] = " "
        if eval > best_eval:
            best_eval = eval
            best_move = (row, col)
    return best_move

def main():
    board = [[" " for _ in range(3)] for _ in range(3)]

    while True:
        print_board(board)

        # Player's move
        row, col = map(int, input("Enter your move (row and column, separated by space): ").split())
        if board[row][col] == " ":
            board[row][col] = "X"
        else:
            print("Cell already taken.  Try again.")
            continue

        # Check if the player wins
        if is_winner(board, "X"):
            print_board(board)
            print("Congratulations!!!!.. You win!")
            break

        # Check if the board is full
        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break

        # AI's move
        print("AI's move:")
        ai_row, ai_col = get_best_move(board)
        board[ai_row][ai_col] = "O"

        # Check if the AI wins
        if is_winner(board, "O"):
            print_board(board)
            print("oops..!AI wins , Better luck next time.")
            break

        # Check if the board is full
        if is_board_full(board):
            print_board(board)
            print("sooo...It's a tie!")
            break

if __name__ == "__main__":
    main()
